var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n', 'tags': '', 'url': 'About.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n clear \n cd downloads \n cc gnuplot_ex1.c \n ./a.out \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n    // 繪製紅色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 繪製藍色矩形區域\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n    // 繪製太陽\n    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\n    float angle = 0;\n    int numRays = 12; // 光芒的數量\n\n    gdPoint points[3]; // 三個頂點的陣列\n\n    for (int i = 0; i < numRays; i++) {\n        angle = i * (2 * M_PI / numRays);\n        float x1 = center_x + cos(angle) * sun_radius;\n        float y1 = center_y + sin(angle) * sun_radius;\n\n        // 調整兩個底邊頂點的位置\n      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\n      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\n      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\n      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n        // 設定多邊形的三個頂點\n        points[0].x = (int)x1;\n        points[0].y = (int)y1;\n        points[1].x = (int)x2;\n        points[1].y = (int)y2;\n        points[2].x = (int)x3;\n        points[2].y = (int)y3;\n\n        gdImageFilledPolygon(img, points, 3, white);\n    }\n  //外圈\n  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n} \n clear \n cd downloads \n cc gd_roc_flag.c \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 国旗颜色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        // 计算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n\n            // 旋转角度（以弧度为单位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // 用指定的颜色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n clear \n cd downloads \n cc gd_usa_flag.c \n ./a.out \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n clear \n cd downloads \n cc japan.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n cc chinese.c -lgd -lm \n ./a.out \n \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 绘制英国国旗\n    draw_uk_flag(img);\n\n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n \n cc U.K.c -lgd -lm \n ./a.out \n \n \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n cc korea.c -lgd -lm \n ./a.out \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w12', 'text': '\n   #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n\nfprintf(stderr, "Error opening the output file.\\n");\n\nreturn 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n cc hellogd.c -lgd -lm \n ./a.out \n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n cd downloads cc \xa0 euler_gnuplot_msd_ex1.c \xa0 -lgd -lm ./a.out \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w15', 'text': '#include <stdio.h>  #include <gd.h>  #include <math.h> \n void draw_roc_flag(gdImagePtr img);  void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n int main() {   // width 3: height 2   int width = 1200;   // 國旗長寬比為 3:2   int height = (int)(width*2.0 / 3.0); \n gdImagePtr img = gdImageCreateTrueColor(width, height);   gdImageAlphaBlending(img, 0); \n draw_roc_flag(img); \n FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");   if (outputFile == NULL) {   fprintf(stderr, "Error opening the output file.\\n");   return 1;   }   gdImagePngEx(img, outputFile, 9);   fclose(outputFile);   gdImageDestroy(img);   return 0;  } \n void draw_roc_flag(gdImagePtr img) {   int width = gdImageSX(img);   int height = gdImageSY(img);   int red, white, blue;   // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處   int center_x = (int)(width/4);   int center_y = (int)(height/4);   // gdImageFilledEllipse 需以長寬方向的 diameter 作圖   // 由於中央白日圓形的半徑為青天寬度的 1/8   // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8   // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8   int sun_radius = (int)(width/8);   // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑   int white_circle_dia = sun_radius;   // 中央藍色圓形半徑為中央白日的 1又 2/15   int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;   // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值   red = gdImageColorAllocate(img, 255, 0, 0); // 紅色   white = gdImageColorAllocate(img, 255, 255, 255); // 白色   blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色   // 根據畫布大小塗上紅色長方形區域   gdImageFilledRectangle(img, 0, 0, width, height, red);   // 青天面積為整面國旗的 1/4, 也是採用長方形塗色   gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);   {int x1 = 429;   int y1 = 125;   int x2 = 279;   int y2 = 165; \n // 畫一條線連接兩個點   gdImageLine(img, x1, y1, x2, y2, white);   }   {int x1 = 170;   int y1 = 274;   int x2 = 279;   int y2 = 165; \n // 畫一條線連接兩個點   gdImageLine(img, x1, y1, x2, y2, white);   }   {   int x1 = 170;   int y1 = 274;   int x2 = 429;   int y2 = 125; \n // 畫一條線連接兩個點   gdImageLine(img, x1, y1, x2, y2, white);   }   // 利用一個藍色大圓與白色小圓畫出藍色環狀   gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);   gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n  // 定義座標結構   typedef struct {   double x;   double y;   } Point; \n // 計算圓與線的交點   void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {   // 直線斜率   double m = (y2 - y1) / (x2 - x1); \n // 直線方程式中的常數項   double b = y1 - m * x1; \n // 圓與直線交點的計算   double A = 1 + pow(m, 2);   double B = 2 * (m * b - m * k - h);   double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); \n // 判斷交點個數   double discriminant = pow(B, 2) - 4 * A * C;   if (discriminant > 0) {   double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);   double y_intersect1 = m * x_intersect1 + b;   printf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1); \n double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);   double y_intersect2 = m * x_intersect2 + b;   printf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);   } else if (discriminant == 0) {   double x_intersect = -B / (2 * A);   double y_intersect = m * x_intersect + b;   printf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);   } else {   printf("No points.\\n");   } \n } \n  // 圓的參數   double circle_x = (int)(width/4); // 圓心 x 座標   double circle_y = (int)(height/4); // 圓心 y 座標   double radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑 \n // 兩點座標 \n \n double x3 = 170;   double y3 = 274;   double x4 = 279;   double y4 = 165; \n circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); \n  double x5 = 279;   double y5 = 165;   double x6 = 429;   double y6 = 125; \n circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); \n \n \n  } \n \n cd downloads cc \xa0roc_list_coord_flag .c \xa0 -lgd -lm ./a.out \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'ANSIC', 'text': '', 'tags': '', 'url': 'ANSIC.html'}, {'title': '1.寫一個 C 程序，用哈希 (#) 列印一個區塊 F，F 的高度為 6 個字符，寬度為 5 個和 4 個字符。列印一個“C”', 'text': '#include <stdio.h> \n int main()  {  // Print top line of pattern  printf(" ######\\n"); \n // Print second line of pattern  printf(" ## ##\\n"); \n // Print lines 3 to 7 of pattern  printf(" #\\n");  printf(" #\\n");  printf(" #\\n");  printf(" #\\n");  printf(" #\\n"); \n // Print bottom line of pattern  printf(" ## ##\\n"); \n // Print last line of pattern  printf(" ######\\n"); \n return(0); } \n \n \n', 'tags': '', 'url': '1.寫一個 C 程序，用哈希 (#) 列印一個區塊 F，F 的高度為 6 個字符，寬度為 5 個和 4 個字符。列印一個“C”.html'}, {'title': '2.猜數字', 'text': '#include<stdio.h> // 包括標準輸入/輸出頭檔。 #include<stdlib.h> // 包含標準庫頭檔。 #include<time.h> // 包含用於產生隨機數的時間頭檔。 int main () // 主函數開始。 { int number, input; // 宣告兩個整數變數「number」和「input」。 srand ( time(NULL) ); // 使用當前時間初始化隨機種子。 \n number = rand() % 10 + 1; // 產生 1 到 10 之間的隨機數並將其儲存在「number」中。 \n do { // do-while 循環的開始。 printf ("\\nGuess the number (1 to 10): "); // 列印一則訊息，提示使用者猜測數字。 scanf ("%d",&input); // 讀取用戶的輸入並將其儲存在“input”中。 \n if (number > input) // 如果隨機數大於使用者輸入。 printf ("The number is higher\\n"); // 列印一條訊息，表示該數字更大。 \n } while (number!=input); // 只要使用者的輸入不等於隨機數就繼續循環。 \n printf ("That is correct!\\n\\n"); // 列印一條訊息，表示用戶猜對了。 \n return 0; // 返回0表示程式執行成功。 } // 主函數結束。cc \n \n \n', 'tags': '', 'url': '2.猜數字.html'}, {'title': '3.列印您的姓名、生日和電話', 'text': '#include <stdio.h> \n int main()  {  // Print Name  printf("Name : xinyu\\n"); \n // Print Date of Birth  printf("DOB : December 6, 2004\\n"); \n // Print Mobile Number  printf("Mobile : 0909198826\\n"); \n // Indicate successful execution  return(0);  } \n \n \n', 'tags': '', 'url': '3.列印您的姓名、生日和電話.html'}, {'title': '4.刪除一句字串裡的空格', 'text': '#include <stdio.h> \n #include <string.h> \n #include <ctype.h> \n // 移除字串中的空白字符，同時使用回調函數進行額外的修改 void remove_whitespace(char *str, void (*modify)(char *)) {  int i, j = 0;  for (i = 0; str[i] != \'\\0\'; i++) {  if (!isspace(str[i])) {  str[j] = str[i];  j++;  } else {  modify(&str[i]);  }  }  str[j] = \'\\0\'; } \n // 將空白字符替換為 \'\\0\' 的回調函數 void remove_space(char *ch) {  *ch = \'\\0\'; } \n int main() {  char str[100];  printf("輸入一個字串：");  fgets(str, sizeof(str), stdin);  str[strcspn(str, "\\n")] = \'\\0\'; // 移除換行符號  printf("原始字串：%s\\n", str); \n // 使用回調函數移除空白字符  remove_whitespace(str, remove_space); \n printf("沒有空白字符的字串：%s\\n", str); \n return 0; } \n \n \n', 'tags': '', 'url': '4.刪除一句字串裡的空格.html'}, {'title': '5.輸入年份產生日期', 'text': '#include <stdio.h> \n #include <stdlib.h> \n #include <string.h> \n \xa0 \n // 定義版面大小 \n int   width = 40, year;  \n int   cols, lead, gap; \n \xa0 \n // 星期幾 \n const   char   *wdays[] = {  "Su" ,  "Mo" ,  "Tu" ,  "We" ,  "Th" ,  "Fr" ,  "Sa"   }; \n \xa0 \n // 每個月有幾天 \n struct   months { \n \xa0\xa0 const   char   *name; \n \xa0\xa0 int   days, start_wday, at; \n } months[12] = { \n \xa0\xa0 {  "January" ,\xa0 31, 0, 0 }, \n \xa0\xa0 {  "February" , 28, 0, 0 }, \n \xa0\xa0 {  "March" ,\xa0\xa0\xa0 31, 0, 0 }, \n \xa0\xa0 {  "April" ,\xa0\xa0\xa0 30, 0, 0 }, \n \xa0\xa0 {  "May" ,\xa0 31, 0, 0 }, \n \xa0\xa0 {  "June" , 30, 0, 0 }, \n \xa0\xa0 {  "July" , 31, 0, 0 }, \n \xa0\xa0 {  "August" ,\xa0\xa0 31, 0, 0 }, \n \xa0\xa0 {  "September" ,\xa0\xa0\xa0 30, 0, 0 }, \n \xa0\xa0 {  "October" ,\xa0 31, 0, 0 }, \n \xa0\xa0 {  "November" , 30, 0, 0 }, \n \xa0\xa0 {  "December" , 31, 0, 0 } \n }; \n \xa0 \n // 間距 \n void   space( int   n) {  while   (n-- > 0) putchar( \' \' ); } \n \xa0 \n // 初始化月份資訊 \n void   init_months() \n { \n \xa0\xa0 int   i; \n \xa0 \n \xa0\xa0 // 判斷閏年 \n \xa0\xa0 if   ((!(year % 4) && (year % 100)) || !(year % 400)) \n \xa0\xa0\xa0\xa0 months[1].days = 29; \n \xa0 \n \xa0\xa0 // 計算每個月份的起始星期幾 \n \xa0\xa0 year--; \n \xa0\xa0 months[0].start_wday = (year * 365 + year/4 - year/100 + year/400 + 1) % 7; \n \xa0 \n \xa0\xa0 for   (i = 1; i < 12; i++) \n \xa0\xa0\xa0\xa0 months[i].start_wday = (months[i-1].start_wday + months[i-1].days) % 7; \n \xa0 \n \xa0\xa0 // 計算列數和間距 \n \xa0\xa0 cols = (width + 2) / 22; \n \xa0\xa0 while   (12 % cols) cols--; \n \xa0\xa0 gap = cols - 1 ? (width - 20 * cols) / (cols - 1) : 0; \n \xa0\xa0 if   (gap > 4) gap = 4; \n \xa0\xa0 lead = (width - (20 + gap) * cols + gap + 1) / 2; \n \xa0\xa0 year++; \n } \n \xa0 \n // 輸出日曆 \n void   print_row( int   row) \n { \n \xa0\xa0 int   c, i, from = row * cols, to = from + cols; \n \xa0\xa0 \xa0 \n \xa0\xa0 // 輸出月份 \n \xa0\xa0 space(lead); \n \xa0\xa0 for   (c = from; c < to; c++) { \n \xa0\xa0\xa0\xa0 i = strlen(months[c].name); \n \xa0\xa0\xa0\xa0 space((20 - i)/2); \n \xa0\xa0\xa0\xa0 printf( "%s" , months[c].name); \n \xa0\xa0\xa0\xa0 space(20 - i - (20 - i)/2 + ((c == to - 1) ? 0 : gap)); \n \xa0\xa0 } \n \xa0\xa0 putchar( \'\\n\' ); \n \xa0 \n \xa0\xa0 // 輸出星期幾 \n \xa0\xa0 space(lead); \n \xa0\xa0 for   (c = from; c < to; c++) { \n \xa0\xa0\xa0\xa0 for   (i = 0; i < 7; i++) \n \xa0\xa0\xa0\xa0\xa0\xa0 printf( "%s%s" , wdays[i], i == 6 ?  ""   :  " " ); \n \xa0\xa0\xa0\xa0 if   (c < to - 1) space(gap); \n \xa0\xa0\xa0\xa0 else   putchar( \'\\n\' ); \n \xa0\xa0 } \n \xa0 \n \xa0\xa0 // 輸出日期 \n \xa0\xa0 while   (1) { \n \xa0\xa0\xa0\xa0 for   (c = from; c < to; c++) \n \xa0\xa0\xa0\xa0\xa0\xa0 if   (months[c].at < months[c].days)  break ; \n \xa0\xa0\xa0\xa0 if   (c == to)  break ; \n \xa0 \n \xa0\xa0\xa0\xa0 space(lead); \n \xa0\xa0\xa0\xa0 for   (c = from; c < to; c++) { \n \xa0\xa0\xa0\xa0\xa0\xa0 for   (i = 0; i < months[c].start_wday; i++) space(3); \n \xa0\xa0\xa0\xa0\xa0\xa0 while (i++ < 7 && months[c].at < months[c].days) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf( "%2d" , ++months[c].at); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (i < 7 || c < to - 1) putchar( \' \' ); \n \xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0 while   (i++ <= 7 && c < to - 1) space(3); \n \xa0\xa0\xa0\xa0\xa0\xa0 if   (c < to - 1) space(gap - 1); \n \xa0\xa0\xa0\xa0\xa0\xa0 months[c].start_wday = 0; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 putchar( \'\\n\' ); \n \xa0\xa0 } \n \xa0\xa0 putchar( \'\\n\' ); \n } \n \xa0 \n // 輸出整年的日曆 \n void   print_year() \n { \n \xa0\xa0 int   row; \n \xa0\xa0 char   buf[32]; \n \xa0\xa0 sprintf(buf,  "%d" , year); \n \xa0\xa0 space((width - strlen(buf)) / 2); \n \xa0\xa0 printf( "%s\\n\\n" , buf); \n \xa0\xa0 for   (row = 0; row * cols < 12; row++) \n \xa0\xa0\xa0\xa0 print_row(row); \n } \n \xa0 \n // 檢查年份是否設置 \n int   main( int   c,  char   **v) \n {  \n \xa0\xa0 int   i, year_set = 0; \n \xa0 \n \xa0\xa0 // 讀取年份 \n \xa0\xa0 printf( "Input a valid year: " ); \n \xa0\xa0 { \n \xa0\xa0\xa0\xa0 scanf ( "%d" , &year);  \n \xa0\xa0\xa0\xa0 for   (i = 1; i < c; i++) { \n \xa0\xa0 // 檢查是否有設定寬度參數 \n \xa0\xa0\xa0 if   (!strcmp(v[i],  "-w" )) { \n \xa0\xa0 if   (++i == c || (width = atoi(v[i])) < 20) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 goto   bail; \n \xa0\xa0\xa0\xa0\xa0\xa0 }  else   if   (!year_set) { \n \xa0\xa0 // 讀取年份參數 \n \xa0\xa0\xa0 if   (!sscanf(v[i],  "%d" , &year) || year <= 0) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 year = 1969; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 year_set = 1; \n \xa0\xa0\xa0\xa0\xa0\xa0 }  else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 goto   bail; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 init_months(); \n \xa0\xa0\xa0\xa0 print_year(); \n \xa0\xa0\xa0\xa0 return   0; \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0 bail: \n \xa0\xa0\xa0\xa0 fprintf(stderr,  "bad args\\nUsage: %s year [-w width (>= 20)]\\n" , v[0]); \n \xa0\xa0\xa0\xa0 exit(1); \n \xa0\xa0 } \n } \n \n \n \n', 'tags': '', 'url': '5.輸入年份產生日期.html'}, {'title': '6.建立一個99乘法表', 'text': '#include <stdio.h> int main() {  int j, i, n;  // 提示用戶輸入表格範圍的最後一個數字  printf("輸入要顯示的乘法表範圍（起始數字為1）：");  scanf("%d", &n);  // 顯示從1到n的乘法表  printf("1 到 %d 的乘法表：\\n", n);  // 雙層循環用於產生乘法表  for (i = 1; i <= 10; i++)  {  for (j = 1; j <= n; j++)  {  // 顯示每個乘法表運算式及結果  printf("%dx%d = %d, ", j, i, i * j);  }  printf("\\n"); // 換行以顯示下一個數字的乘法表  }  return 0; } \n \n \n', 'tags': '', 'url': '6.建立一個99乘法表.html'}, {'title': '7.輸入任意數的平方', 'text': '#include <stdio.h> double square(double num) {  return (num * num); } int main() {  int num;  double n;  printf("\\n\\n 函數：計算任意數的平方 :\\n");  printf("------------------------------------------------\\n");   printf("輸入任意數以計算平方 : ");  scanf("%d", &num);  n = square(num);  printf("%d 的平方是 : %.2f\\n", num, n);   return 0; } \n \n \n', 'tags': '', 'url': '7.輸入任意數的平方.html'}, {'title': '8.用C語言編寫一格城市來列印目前日期和時間', 'text': '#include <time.h> \n \n #include <stdio.h>\xa0  \n #include <stdlib.h> \n \xa0 \n int   main( void ) \n { \n \xa0\xa0\xa0\xa0 time_t   cur_time;\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0  // 定義一個 time_t 型變數 cur_time 來存儲當前時間。 \n \xa0\xa0\xa0\xa0 char * cur_t_string;\xa0\xa0\xa0\xa0\xa0  // 定義一個指向字符的指針 cur_t_string，用來存儲轉換後的時間字符串。 \n \xa0 \n \xa0\xa0\xa0\xa0 cur_time =  time (NULL);\xa0\xa0  // 使用 time 函數獲取當前時間，並將其存儲在 cur_time 變數中。 \n \xa0 \n \xa0\xa0\xa0\xa0 if   (cur_time == (( time_t )-1)) \n \xa0\xa0\xa0\xa0 { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 如果獲取當前時間失敗，輸出錯誤信息並以失敗的狀態退出程序。 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ( void )  fprintf (stderr,  "無法獲取當前日期和時間。\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 exit (EXIT_FAILURE); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 cur_t_string =  ctime (&cur_time);  // 將 cur_time 中的時間轉換為本地時間格式，並將結果存儲在 cur_t_string 中。 \n \xa0 \n \xa0\xa0\xa0\xa0 if   (cur_t_string == NULL) \n \xa0\xa0\xa0\xa0 { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 如果轉換時間失敗，輸出錯誤信息並以失敗的狀態退出程序。 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ( void )  fprintf (stderr,  "無法轉換當前日期和時間。\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 exit (EXIT_FAILURE); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // 通過 printf 函數輸出轉換後的時間字符串。 \n \xa0\xa0\xa0\xa0 ( void )  printf ( "\\n當前時間為：%s\\n" , cur_t_string); \n \xa0 \n \xa0\xa0\xa0\xa0 // 退出程序，表示成功執行。 \n \xa0\xa0\xa0\xa0 exit (EXIT_SUCCESS); \n } \n \n \n', 'tags': '', 'url': '8.用C語言編寫一格城市來列印目前日期和時間.html'}, {'title': '9.判斷是甚麼三角形', 'text': '#include <stdio.h> // 包含標準輸入/輸出的標頭文件。 int main()  {   int sidea, sideb, sidec; // 宣告三角形的三邊的變數。  /*   * 讀取三角形的三邊長  */   printf("輸入三角形的三邊長: "); // 提示使用者輸入。  scanf("%d %d %d", &sidea, &sideb, &sidec); // 讀取並儲存三角形的三邊。  if (sidea == sideb && sideb == sidec) // 檢查是否所有邊都相等。   {   printf("這是一個等邊三角形。\\n"); // 印出等邊三角形的訊息。  }   else if (sidea == sideb || sidea == sidec || sideb == sidec) // 檢查是否有兩邊相等。   {   printf("這是一個等腰三角形。\\n"); // 印出等腰三角形的訊息。  }   else // 如果沒有邊相等。   {   printf("這是一個不等邊三角形。\\n"); // 印出不等邊三角形的訊息。  }   return 0;  } \n \n \n', 'tags': '', 'url': '9.判斷是甚麼三角形.html'}, {'title': '10.判斷是否為醜數', 'text': '# include <stdio.h> # include <string.h> int main() { int n,x=0;  printf("\\n\\n Check whether a given number is an ugly number:\\n");  printf("----------------------------------------------------\\n");  printf("Input an integer number: ");  scanf("%d",&n);  if (n <= 0) {   printf("Input a correct number.");   }  while (n != 1)   {   if (n % 5 == 0)   {   n /= 5;   }   else if (n % 3 == 0)   {   n /= 3;   }   else if (n % 2 == 0)   {   n /= 2;   }   else  {   printf("It is not an ugly number.\\n");   x = 1;   break;   }   }   if (x==0)  {   printf("It is an ugly number.\\n");  } } \n \n', 'tags': '', 'url': '10.判斷是否為醜數.html'}, {'title': 'brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n 123 \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'brython.html'}]};